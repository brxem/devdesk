// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    displayName   String?   @map("display_name")
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    bio           String?

    badges      Badge[]
    accounts    Account[]
    sessions    Session[]
    resources   Resource[]
    preferences UserPreferences?

    @@map("users")
}

model UserPreferences {
    userId String @id @map("user_id")

    /// If the user wants to show their resources on their profile
    showResources Boolean @default(true) @map("show_resources")
    user          User    @relation(fields: [userId], references: [id])

    @@map("user_preferences")
}

model Badge {
    id     String  @id @default(cuid())
    name   String
    user   User?   @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    @@map("badges")
}

model Resource {
    id          String   @id @default(cuid())
    title       String
    description String
    uri         String   @unique
    image       String   @unique
    author      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    userId      String   @map("user_id")

    @@map("resources")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
